swagger: '2.0'
info:
  title: Dinner Solutions API
  description: An API for Dinner Solutions, focused on mobile
  version: "0.1.0"
host: api.davidjfelix.com
schemes:
  - http
  - https
basePath: /v0
produces:
  - application/json
paths:
  /auth/google/by-jwt:
    post:
      summary: Accepts JWT from google.
      description: |
        Accepts JWT from google.
      consumes:
        - text/plain
      parameters:
        - name: jwt
          in: body
          required: true
          description: |
            The UTF-8 encoded, base64 encoded, JWT from Google
          type: string
          format: UTF-8 Base64 JWT
      tags:
        - auth
      responses:
        200:
          description: Authentication Accepted
          schema:
            $ref: '#/definitions/BearerToken'
        400:
          description: Malformed Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Upstream Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /users/{user_id}:
    get:
      summary: User by id
      description: |
        The user endpoint returns information about a given user or a set of users.
      parameters:
        - name: user_id
          in: path
          description: The id of the user
          required: true
          type: string
          format: uuid
      tags:
        - users
      responses:
        200:
          description: A user object.
          schema:
            $ref: '#/definitions/User'
        404:
          description: User is not found
          schema:
            $ref: '#/definitions/Error'
  /me:
    get:
      summary: Me
      description: |
        The me endpoint returns information about my user profile.
      tags:
        - users
      responses:
        200:
          description: A user object.
          schema:
            $ref: '#/definitions/User'
  /me/by-token:
    post:
      summary: Me by token
      description: |
        The me by token endpoint returns information about my user profile.
        It takes a token to authenticate.
      tags:
        - users
      responses:
        200:
          description: A user object.
          schema:
            type: object
  /meals:
    get:
      summary: Get a meals collection.
      description: |
        The meals get collection endpoint allows clients to search for meals by parameters.
        It returns meals based on relevance to the search parameters.
      parameters:
        - name: lat
          in: query
          description: The geographic latitude of the search.
          required: false
          type: number
          format: double
        - name: lng
          in: query
          description: The geographic longitude of the search.
          required: false
          type: number
          format: double
      tags:
        - meals
        - search
      responses:
        200:
          description: The search parameters yielded a result set.
          schema:
            $ref: '#/definitions/MealCollection'
    post:
      summary: Post a new meal.
      description: |
        The meals post endpoint allows clients to create a new meal.
      parameters:
        - name: meal
          in: body
          schema:
            $ref: '#/definitions/NewMeal'
      tags:
        - meals
      responses:
        201:
          description: The meal posted correctly
          schema:
            $ref: '#/definitions/Meal'
  /meals/{meal_id}:
    delete:
      summary: Delete a meal by id
      description: |
        The delete action marks the meal as inactive.
      parameters:
        - name: meal_id
          in: path
          description: The id of the meal
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Meal'
    get:
      summary: Get a meal
      description: |
        Get a meal
      parameters:
        - name: meal_id
          in: path
          description: The id of the meal
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Meal'
    patch:
      summary: Partially update a meal
      description: |
        Partially update a meal
      parameters:
        - name: meal_id
          in: path
          description: The id of the meal
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Meal'
    put:
      summary: Update a meal
      description: |
        Update a meal
      parameters:
        - name: meal_id
          in: path
          description: The id of the meal
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Meal'
definitions:
  BearerToken:
    type: object
    required:
      - type
      - data
    properties:
      type:
        type: string
      data:
        type: string
  User:
    type: object
    required:
      - user_id
      - name
      - email
    properties:
      user_id:
        type: string
        format: uuid
      name:
        type: string
      email:
        type: string
        format: email
  Meal:
    type: object
    required:
      - meal_id
      - name
    properties:
      meal_id:
        type: string
        format: uuid
      name:
        type: string
  MealCollection:
    type: object
    required:
      - meals
    properties:
      meals:
        type: array
        items:
          $ref: '#/definitions/Meal'
  NewMeal:
    type: object
    required:
      - name
      - lat
      - lng
    properties:
      name: 
        type: string
      lat:
        type: number
        format: double
      lng:
        type: number
        format: double
  IngredientCollection:
    type: object
    required:
      - ingredients
    properties:
      ingredients:
        type: array
        items:
          type: string
  Error:
    type: object
    required:
      - error
      - details
    properties:
      error:
        type: integer
      details:
        type: string
